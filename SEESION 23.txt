//BINARY SEARCH RECURSIVE

int array_BinarySearch_rec(int*arr,int first,int last,const int num)
{
    int middle=(first+last)/2;
     if(first>last)
    {
        return -1;
    }

    else if(arr[middle]==num)
    {
        return middle;
    }

    else if (arr[middle]>num)
    {
        return array_BinarySearch_rec(arr,first,middle-1,num);
    }
    else
    {
        return array_BinarySearch_rec(arr,middle+1,last,num);
    }

}
int main(){

int arr[]={1,1,1,1,1,1,2,2,2,2,3,3,3,3,4,5,6,7,7,7,8,,8,8,8,9,9,9,10,11,11,12,12,13,13,14};
int size=sizeof(arr)/sizeof(arr[0]);
int rep,num;
array_print(arr,size);
  rep=array_BinarySearch_rec(arr,0,size-1,14);
  if(rep==-1)
  {printf("not found\n")};
  else{
    printf("found at index = %d\n",rep);
  }

    return 0;
}
***********************************************************************
//COUNTING SORT

void counting_sort(int*arr,int size)
{
    int i,count[10]= {0},max=0,j=0;
    for(i=0; i<size; i++)
    {
        count[arr[i]]++;
    }

    /*for(i=0; i<10; i++)
    {
        printf("%d   %d\n",i,count[i]);
    }*/

    for(i=0; i<10; i++)
    {
        while(count[i]>0)
        {
           arr[j]=i;
           j++;
           count[i]--;
        }
    }

}


int main()
{
    int arr[]={1,4,6,5,3,2,1,0,5,9,7,98,1,1,2,2,2,3,4,5,6,7,8,9,41,45,66,99,111,112,145};
  int size=sizeof(arr)/sizeof(arr[0]);
  int rep,num;
  array_print(arr,size);
  counting_sort(arr,size);
  if(rep==-1)
  {printf("not found\n")};
  else{
    printf("found at index = %d\n",rep);
  }

    return 0;
}

