//LINEAR SEARCH SORTED ARRAY

int array_search(int*arr,int size,const int num)
{
    int i;

    for( i=0; i<size; i++)
    {
        if(arr[i]==num)
        {
            return i;
        }
    }

    return -1;
}


int main()
{
    int arr[]={1,1,1,2,2,2,3,4,5,6,7,8,9,41,45,66,99,111,112,145};
  int size=sizeof(arr)/sizeof(arr[0]);
  int rep,num;
  array_print(arr,size);
  rep=array_search(arr,size,14);
  if(rep==-1)
  {printf("not found\n")};
  else{
    printf("found at index = %d\n",rep);
  }

    return 0;
}
********************************************************************************
//BINARY SEARCH SORTED ARRAY

int array_BinarySearch(int*arr,int size,const int num)
{
    int first,last,middle,c=0;
    first=0;
    last=size-1;

    while(1)
    {
        c++;
        middle=(first+last)/2;

        if(arr[middle]==num)
        {
            printf("c=%d\n",c);
            return middle;
        }
        else if(arr[middle]>num)
        {
            last=middle-1;
        }
        else
        {
            first=middle+1;
        }
        if(first>last)
        {
            return -1;
        }
    }
    printf("c=%d\n",c);
    return -1;



}


int main()
{
    int arr[]={1,1,1,2,2,2,3,4,5,6,7,8,9,41,45,66,99,111,112,145};
  int size=sizeof(arr)/sizeof(arr[0]);
  int rep,num;
  array_print(arr,size);
  rep=array_Binarysearch(arr,size,14);
  if(rep==-1)
  {printf("not found\n")};
  else{
    printf("found at index = %d\n",rep);
  }

    return 0;
}
********************************************************************************
//HOW TO REAARANGE ARRAY

void bubble_sort(int*arr,int size)//	O(N^2)
{
    int i,j,temp,c=0,sortedFlag;

    for(j=0; j<size; j++)
    {
        sortedFlag=1;//FLAG TO REDUCE LOOP
        for(i=0; i<size-1-j; i++)
        {
            c++;
            if(arr[i+1]<arr[i])// if(arr[i+1]>arr[i]) TO REARRANGE FROM MAX TO MIN
            {
                temp=arr[i];
                arr[i]=arr[i+1];
                arr[i+1]=temp;
                sortedFlag=0;
            }

        }
        if(sortedFlag==1)//IF ELEMNT ARRENGED
        {
            break;
        }

    }
    printf("s=%d c=%d\n",size,c);

}



int main()
{
    int arr[]={1,1,1,-7,-22,227,2,13,78,-9,34,-29,2,2,3,4,5,6,7,8,9,41,45,66,99,111,112,145};
  int size=sizeof(arr)/sizeof(arr[0]);
  int rep,num;
  array_print(arr,size);
  bubble_sort(arr,size);
 array_print(arr,size);
  

    return 0;
}
*********************************************************************************

void selection_sort(int*arr,int size)
{
    int i,j,max,last,temp;
    last=size-1;

    for(j=0; j<size; j++)
    {
        max=0;
        for(i=0; i<=last; i++)
        {
            if(arr[i]>arr[max]) // if(arr[i]<arr[max]) if rearrange fro min to max
            {
                max=i;
            }
        }
        temp=arr[max];
        arr[max]=arr[last];
        arr[last]=temp;
        last--;
    }



}


int main()
{
    int arr[]={1,1,1,2,-2,-9,15,-3,44,79,-80,-93,2,3,4,5,6,7,8,9,41,45,66,99,111,112,145};
  int size=sizeof(arr)/sizeof(arr[0]);
  int rep,num;
  array_print(arr,size);
  selection_sort(arr,size);

    return 0;
}

