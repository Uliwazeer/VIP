int array_mostRepeated(int*arr,int size,int*pnum) //O(1)
{
    int i,j,count=0,max=0,c=0;
    for(i=0; i<size; i++)
    {
        count=0;
        for(j=i; j<size; j++)
        {
            if(arr[i]==arr[j])
            {
                count++;
            }
            c++;
        }
        if(count>max)
        {
            max=count;
            *pnum=arr[i];
        }
    }
    printf("size=%d   c=%d\n",size,c);
    return max;
}
int main()
{   int arr[]={1,2,3,4,5,6,7,8,9,4,4,4,4,4,4,4,2,1,6,9,7};

    int size=sizeof(arr)/sizeof(arr[0]);
    int rep,num;
    array_print(arr,size);
    rep=array_mostReapeated(arr,size,&num);
    printf("NUMBER %d IS REPEATED %d\n",num,rep);
   }
************************************************************************************************
int array_mostRepeated_sorted(int*arr,int size,int*pnum)//O(1)
{
    int i,j,count=0,max=0,c=0;
    for(i=0; i<size-1; i++)
    {
        c++;
        if(arr[i]==arr[i+1])
        {
            count++;
            if(count>max)
            {
                max=count;
                *pnum=arr[i];
            }
        }
        else
        {
            count=0;

        }
    }

    printf("size=%d   c=%d\n",size,c);
    return max+1;

}
int main()
{   //int arr[]={1,2,3,4,5,6,7,8,9,4,4,4,4,4,4,4,2,1,6,9,7};

//sorted array
    int arr[]={1,1,1,1,2,3,4,5,6,7,8,9,9,9,9};
    int size=sizeof(arr)/sizeof(arr[0]);
    int rep,num;
    array_print(arr,size);
    rep=array_mostReapeated_sorted(arr,size,&num);
    printf("NUMBER %d IS REPEATED %d\n",num,rep);
    
}
********************************************************************************************
//FUNC MONO FREQUENCY
int array_mostRepeated_mono(int*arr,int size,int*pnum)//O(1)
{
    int i,count[10]= {0},max=0;
    for(i=0; i<size; i++)
    {
        count[arr[i]]++;
    }

    for(i=0; i<10; i++)
    {
        printf("%d   %d\n",i,count[i]);
    }
    for(i=0; i<10; i++)
    {
        if(count[i]>max)
        {
            max=count[i];
            *pnum=i;
        }
    }

    return max;
}

int main()
{   int arr[]={1,2,3,4,5,6,7,8,9,4,4,4,4,4,4,4,2,1,6,9,7};

//sorted array
    //int arr[]={1,1,1,1,2,3,4,5,6,7,8,9,9,9,9};
    int size=sizeof(arr)/sizeof(arr[0]);
    int rep,num;
    array_print(arr,size);
    rep=array_mostReapeated_mono(arr,size,&num);
    printf("NUMBER %d IS REPEATED %d\n",num,rep);
    
}
***************************************************************************************************
void string_copyNoRepeat(char*str,char* copy)
{
    int i,j,flag=0,k=0;

    for(i=0; str[i]; i++)
    {
        flag=0;
        for(j=0; j<i; j++)
        {
            if(str[i]==str[j])
            {
                flag=1;
            }
        }
        if(flag==0)
        {
            copy[k]=str[i];
            k++;
        }

    }
    copy[k]=0;
}
int main()
{   char str[]="Ali Nour5!wazeer MohAmEed";
    char str2[100];
    string_copyNoRepeat(str,str2);
string_print(str);
    string_print(str2);
    return 0;
}
**********************************************************
USING FREQ ARRAY

void string_copyNoRepeat2(char*str,char* copy)
{
    int i,k=0;
    char count[256]= {0};
    for(i=0; str[i]; i++)
    {

        if( count[str[i]]==0)
        {
            copy[k]=str[i];
            count[str[i]]++;
            k++;
        }
    }
    copy[k]=0;
}

int main()
{   char str[]="Ali Nour5!wazeer MohAmEed";
    char str2[100];
    string_copyNoRepeat2(str,str2);
string_print(str);
    string_print(str2);
    return 0;
}
*************************************************************************
//THE BEST CODE OF ALL ABOVE IN THIS FILE AND MORE SPEED
//HOW TO HANDLE NEGATIVE NUM..........???
int array_mostRepeated_Freq(int*arr,int size,int*pnum)//O(N)
{
    int i,max=0,max_n=arr[0],min_n=arr[0],count_size;

    for(i=0; i<size; i++)
    {
        if(arr[i]>max_n)
        {
            max_n=arr[i];
        }
        /* if(arr[i]<min_n)
         {
             min=arr[i];
         }*/
    }
    min_n=0;

    count_size=max_n-min_n+1;
    int*count=calloc(count_size,sizeof(int));
    if(count==(void*)0)
    {
        /* error*/
    }
    else
    {
        for(i=0; i<size; i++)
        {
            count[arr[i]]++;
        }
        for(i=0; i<count_size; i++)
        {
            printf("%d   %d\n",i,count[i]);
        }
        for(i=0; i<count_size; i++)
        {
            if(count[i]>max)
            {
                max=count[i];
                *pnum=i;
            }
        }

    }

    free(count);
    return max;

}

int main()
{   int arr[]={1,2,3,4,5,6,7,8,9,4,4,4,4,4,4,4,2,1,6,9,7};

//sorted array
    //int arr[]={1,1,1,1,2,3,4,5,6,7,8,9,9,9,9};
    int size=sizeof(arr)/sizeof(arr[0]);
    int rep,num;
    array_print(arr,size);
    rep=array_mostReapeated_Freq(arr,size,&num);
    printf("NUMBER %d IS REPEATED %d\n",num,rep);
    
}
