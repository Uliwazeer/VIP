(11) Given two integers: L and R, Find the maximal value of A
xor B where A and B satisfy the condition L =< A <= B <=
R Constrains: 1 <= L <= R <= 1000 Input format: the
input contains two lines first line contains L and next
line contains R. Output format: The maximum value of
Axor B.
=============================SOLUTION==============================
//FIRST WAY

#include <stdlib.h>
#include <stdio.h>

void printf_binary(unsigned int num)
{
    int i,flag=0;
    for(i=31;i>=0;i--)
    {
        if((n>>i)&1)
        {
            printf("1");
            flag=1;
        }
        else
        {
            if(flag==1)
            {
                printf("0");
            }
        }
    }
    printf("\n");
}


void printf_binary2(unsigned int num)
{
    int i,flag=0;
    for(i=31;i>=0;i--)
    {
        if((n>>i)&1)
        {
            printf("1");
            flag=1;
        }
        else
        {

                printf("0");

        }
    }
    printf("\n");
}
int Find_Max_Xor(int L, int R) {
    int max_xor = 0;
    int current_xor;

    for (int i = L; i <= R; i++) {
        for (int j = i; j <= R; j++) {
            current_xor = i ^ j;
            if (current_xor > max_xor) {
                max_xor = current_xor;
            }
        }
    }

    return max_xor;
}

int main() {
    int L, R;
    while(1){
    printf("\nENTER THE FIRST VALUE L: ");
    scanf("%d", &L);
    printf("\nENTER THE SECOND VALUE R: ");
    scanf("%d", &R);

    int max_xor = Find_Max_Xor(L, R);
    printf("\nMAXIMUIM VALUE BETWEEN L AND R IS: %d\n", max_xor);
    printf("============================================================\n");
    }
    return 0;
}
*******************************************************************************
//SECOND WAY


#include <stdlib.h>
#include <stdio.h>

void printf_binary(unsigned int num)
{
    int i,flag=0;
    for(i=31;i>=0;i--)
    {
        if((n>>i)&1)
        {
            printf("1");
            flag=1;
        }
        else
        {
            if(flag==1)
            {
                printf("0");
            }
        }
    }
    printf("\n");
}


void printf_binary2(unsigned int num)
{
    int i,flag=0;
    for(i=31;i>=0;i--)
    {
        if((n>>i)&1)
        {
            printf("1");
            flag=1;
        }
        else
        {

                printf("0");

        }
    }
    printf("\n");
}
int Find_Max_Xor(int l, int r)
{
    int max = 0,i,j;
    for(i=l; i<r; i++)
        for(j=i+1; j<=r; j++)
            max = max<(i^j)?i^j:max;
    return max;
}
int main()
{
    int L, R;
    while(1)
    {
        printf("\nENTER THE FIRST VALUE L: ");
        scanf("%d", &L);
        printf("\nENTER THE SECOND VALUE R: ");
        scanf("%d", &R);

        int max_xor = Find_Max_Xor(L, R);
        printf("\nMAXIMUIM VALUE BETWEEN L AND R IS: %d\n", max_xor);
        printf("============================================================\n");
    }
    return 0;
}
***********************************************************************************
(10) Write c function to count the max number of zeros
between two ones in the binary representation of a
number (296384-> {1001000010111000000} return 4).
=============================SOLUTION==============================
//FIRST WAY

#include <stdio.h>
#include <stdlib.h>
#include <stdio.h>


void printf_binary(unsigned int num)
{
    int i,flag=0;
    for(i=31;i>=0;i--)
    {
        if((n>>i)&1)
        {
            printf("1");
            flag=1;
        }
        else
        {
            if(flag==1)
            {
                printf("0");
            }
        }
    }
    printf("\n");
}


void printf_binary2(unsigned int num)
{
    int i,flag=0;
    for(i=31;i>=0;i--)
    {
        if((n>>i)&1)
        {
            printf("1");
            flag=1;
        }
        else
        {

                printf("0");

        }
    }
    printf("\n");
}
int Max_Zeros_Between_Ones(unsigned int num) {
    int Max_Zeros = 0;
    int Current_Zeros = 0;
    int Found_First_One = 0;

    while (num > 0) {
        if (num & 1) {
            if (Found_First_One) {
                if (Current_Zeros > Max_Zeros) {
                    Max_Zeros = Current_Zeros;
                }
                Current_Zeros = 0;
            } else {
                Found_First_One = 1;
            }
        } else {
            if (Found_First_One) {
                Current_Zeros++;
            }
        }
        num >>= 1;
    }
    return Max_Zeros;
}

int main() {
    unsigned int num = 296384;
    int Max_Zeros = Max_Zeros_Between_Ones(num);
    printf("\nMAXIMUM ZEROS BETWEEN ONES IS %d\n", Max_Zeros);

    return 0;
}
***************************************************************************************************
//SECOND WAY

#include <stdio.h>

int main( void )
{

	int n;
	printf("ENTER YOUR NUMBER YA USER: ");
	scanf("%d", &n);
	int count = 0;
	int Count_Flag = 0;
	int max = 0;

	for( ; n > 0; n >>= 1 )
	{
		if( n % 2 )
		{
			if( count > max )
				max = count;
			count = 0;
			Count_Flag = 1;
		}
		else if ( Count_Flag )
			count++;
	}
	printf_binary2(max);
	printf("\nMAXIMUIM NUMBER OF ZEROS BETWEEN ONES %d\n", max);

	printf("\n");
	return 0;
}
**************************************************************************************************************
(9) Write c function to take number of lines and draw
pattern with '*' like:
=============================SOLUTION==============================
PATTERNS OF REVERSE TRIANGLES


#include <stdio.h>

int main( void )
{

    int rows,i,j;
    printf("ENTER YOUR NUMBER YA USER: ");
    scanf("%d",&rows);
    for(i=1;i<=rows;i++)
    {
        for(j=i;j<=rows;j++)
            printf("*");
        printf("\n");
    }
	return 0;
}
*******************************************************************************************************************
PATTERNS OF X PATTERN

#include <stdio.h>

int main( void )
{

    int n,i,j;
    printf("ENTER YOUR NUMBER YA USER: ");
    scanf("%d",&n);
   int count_num = n * 2 - 1;

    for(i=1;i<=count_num;i++)
    {
        for(j=1;j<=count_num;j++){
                if(j==i || (j==count_num - i + 1))
                {
                    printf("*");
                }
                else
                    printf(" ");
        }
        printf("\n");
    }
	return 0;
}
*******************************************************************************************************************
PYRAMID PATTERN

#include <stdio.h>

int main( void )
{

    int n,i,j;
    printf("ENTER YOUR NUMBER YA USER: ");
    scanf("%d",&n);

  for(i=1;i<=n;i++)
  {
    for(j=i;j<n;j++)
    {
        printf(" ");
    }
        for(j=1;j<=(2*i- 1);j++)
        {
            printf("*");
        }

    printf("\n");
}
	return 0;
}
******************************************************************************************************************
RIGHT PYRAMIDS PATTERN
#include <stdio.h>

int main( void )
{

    int n,i,j;
    printf("ENTER YOUR NUMBER YA USER: ");
    scanf("%d",&n);

  for(i=1;i<=n;i++)
  {
    for(j=1;j<=i;j++)
    {
        printf("*");
    }
    printf("\n");
}
	return 0;
}
********************************************************************************************************************
(8) Write a full C program to take 4 choose from user:
1-Set bit.
2-Clear bit
3-Toggle bit.
4-Read bit.
then take number, and bit number.
print the number after set, clear, or toggle if 1,2 or 3 is
selected.
print the bit value if 4 is selected.
=============================SOLUTION==============================

#include <stdio.h>
#include <stdlib.h>

unsigned int Set_Bit(unsigned int num, int Bit_Pos) {
    return num | (1 << Bit_Pos);
}


unsigned int Clear_Bit(unsigned int num, int Bit_Pos) {
    return num & ~(1 << Bit_Pos);
}

unsigned int Toggle_Bit(unsigned int num, int Bit_Pos) {
    return num ^ (1 << Bit_Pos);
}

int Read_Bit(unsigned int num, int Bit_Pos) {
    return (num >> Bit_Pos) & 1;
}

int main() {
    unsigned int num;
    unsigned int Bit_Pos = Bit_Pos - 1;
    int choice ;//Bit_Pos;

    printf("ENTER YOUR NUMBER TO CHECK: ");
    scanf("%u", &num);

    printf("ENTER YOUR PROCESS TO CHOOSE IT IS NUMBER:\n");
    printf("1-SET BIT PROCESS\n");
    printf("2-CLEAR BIT PROCESS\n");
    printf("3-TOGGLE BIT PROCESS\n");
    printf("4-READ BIT PROCESS\n");
    scanf("%d", &choice);

    printf("ENTER YOUR POSTION OF BIT: ");
    scanf("%d", &Bit_Pos);

    switch (choice) {
        case 1:
            num = Set_Bit(num, Bit_Pos);
            printf("NUMBER AFTER SETTING BIT IS: %u\n", num);
            break;
        case 2:
            num = Clear_Bit(num, Bit_Pos);
            printf("NUMBER AFTER CLEARNING BIT IS: %u\n", num);
            break;
        case 3:
            num = Toggle_Bit(num, Bit_Pos);
            printf("NUMBER AFTER TOGGLE BIT IS: %u\n", num);
            break;
        case 4:
            printf("YOUR BIT VALUE POSITION IS %d: %d\n", Bit_Pos, Read_Bit(num, Bit_Pos));
            break;
        default:
            printf("OOPS!! TRY AGAIN Invalid choice!\n");
            break;
    }

    return 0;
}
****************************************************************************************************************
(7) Write c code to sum numbers from 1 to 100 (without
loop).
=============================SOLUTION==============================
//FIRST WAY

#include <stdio.h>

int main() {
    int n = 100;
    int start = 1;
    int end = 100;

    int sum = (n / 2) * (start+ end);

    printf("SUM OF NUMBERS START FROM 1 TO END 100 IS : %d\n", sum);

    return 0;
}
**************************************************************************
//SECOND WAY
int sum_num_0_100(int n)
{
    return ( n+1 )* (n/2);
}
int main(){

	int n = 100;
printf("SUM OF NUMBERS START FROM 1 TO END 100 IS: %d",sum_num_0_100(n)):
	return 0;
}
***************************************************************************
(6) Write c code to reverse bits in an 8-bit number
(149->10010101 return 169->10101001),
(5->00000101 return 160->10100000).
=============================SOLUTION==============================
#include <stdio.h>
#include <stdlib.h>
unsigned char Reverse_Bits(unsigned char num)
{
    unsigned char Reversed_Num = 0;

    for (int i = 0; i < 8; i++)
    {
        Reversed_Num <<= 1;
        if (num & 1)
        {
            Reversed_Num |= 1;
        }
        num >>= 1;
    }

    return Reversed_Num;
}

int main()
{
    unsigned char num;
    while(1)
    {
        printf("\nENTER YOUR NUMBER TO REVERSED: ");
        scanf("%d",&num);
        unsigned char Reversed_Num = Reverse_Bits(num);

        printf("YOUR ORIGNIAL NUMBER IS : %u\n", num);
        printf("YOUR REVERSED NUMBER IS: %u\n", Reversed_Num);
    }

    return 0;
}
**************************************************************************************
(5)write a program to print the binary representation of a
number, try not to print zeros on the left (5->print 101).
=============================SOLUTION==============================
#include <stdio.h>
#include <stdlib.h>
void Print_Binary(unsigned int num) {
    int Num_Bit = 31;
    while (((num >> Num_Bit) & 1) == 0) {
        Num_Bit--;
    }
    for (int i = Num_Bit; i >= 0; i--) {
        int bit = (num >> i) & 1;
        printf("%d", bit);
    }

    printf("\n");
}

int main() {
    unsigned int num;
    while(1)
    {
    printf("ENTER YOUR NUMBER TO BE BINARY REPREPRESNTATION IS: ");
    scanf("%d",&num);
    Print_Binary(num);
}
    return 0;
}
***********************************************************************************
(4) Write a program to count the number of 1’s in an
unsigned 32-bit integer.
=============================SOULUTION=============================
#include <stdio.h>

int countOnes(unsigned int num) {
    int count = 0;

    while (num != 0) {
        if (num & 1) {
            count++;
        }
        num >>= 1;
    }

    return count;
}

int main() {
    unsigned int number;

    printf("Enter a number: ");
    scanf("%u", &number);

    int onesCount = countOnes(number);

    printf("Number of 1's: %d\n", onesCount);

    return 0;
}
***********************************************************************************
(3) Write a program to reverse a number in decimal
representation (1205->5021).
=============================SOLUTION==============================
#include <stdio.h>

int Reverse_Number_In_Decimal(int num) {
    int reversed_Num = 0;

    while (num != 0) {
        int remainder = num % 10;
        reversed_Num = (reversed_Num * 10) + remainder;
        num /= 10;
    }

    return reversed_Num;
}

int main() {
    int number;

    printf("ENTER YOUR NUMBER YA USER: ");
    scanf("%d", &number);

    int reversed_Number = Reverse_Number_In_Decimal(number);

    printf("REVERSED NUMBER: %d\n", reversed_Number);

    return 0;
}
**************************************************************
(2) Write a C program to take a number and a character
from user if the number is even print the same
character, if the number is odd print the other case of
the character (a->A, B->b).
=============================SOLUTION==============================
#include <stdio.h>
#include <stdlib.h>

int main() {
    int number;
    char character;

    printf("Enter a number: ");
    scanf("%d", &number);

    printf("Enter a character: ");
    scanf(" %c", &character);

    if (number % 2 == 0) {
        printf("Character: %c\n", character);
    } else {
        char oppositeCase;

        if (character >= 'a' && character <= 'z') {
            oppositeCase = character - 32;
        } else if (character >= 'A' && character <= 'Z') {
            oppositeCase = character + 32;
        } else {
            oppositeCase = character;
        }

        printf("Opposite case character: %c\n", oppositeCase);
    }

    return 0;
}
*************************************************************************************
(1)Write a program that reads the radius of a circle and
calculates the area and circumference.
=============================SOLUTION==================================
#include <stdio.h>

#define PI 3.14159

int main() {
    double radius, area, circumference;

    printf("ENTER YOUR RADIUS OF CIRCILE: ");
    scanf("%lf", &radius);

    area = PI * radius * radius;
    circumference = 2 * PI * radius;

    printf("AREA OF CIRCLE IS : %.2lf\n", area);
    printf("CIRCUMFERENCE OF CIRCLE IS : %.2lf\n", circumference);

    return 0;
}
*************************************************************************************
